import { Button, Typography, CircularProgress } from "@mui/material"
import { useRecoilValue } from "recoil"
import { isLoadingSummaryDescriptionsState, summaryDescriptionsState } from "../../atoms"
import { capitalizeString } from "../../hooks/useUtility"
import { Attribute } from "../../interfaces"



const SummaryDescriptionsTab: React.FC = (): JSX.Element =>
{
    const summaryDescriptions = useRecoilValue(summaryDescriptionsState)
    const isLoadingSummaryDescriptions = useRecoilValue(isLoadingSummaryDescriptionsState)

    // previous implementation: https://github.com/Dominik7131/Conceptual-Modeling-LLM-Assistant/blob/4b71b1e6f62792f586e35b3baac58a4d8d9c10c5/conceptual-model-editor-assistant/src/components/Topbar.tsx
        
    // arguments:
    //  - selected nodes
    //  - selected edges
    // issue: how to distinguish existing descriptions vs. new descriptions that user did not accepted yet?

    // control flow:
    // 1) user selects some part of his conceptual model and clicks on summary2 button
    // 2) from selectedNodes and selectedEdges we obtain list of all selected entities, attributes and relationships
    // 3) for each entity, attribute and relationship: if it does not contain description then save it some object that we will later pass to LLM to generate descriptions
    // 4) send this object to LLM
    // 5) show to the user list of all selected items with their descriptions
    //  - if the description is newly generated from LLM then distinguish it with gray text and add buttons for the user to accept/reject the description
    //      - we know which description is newly generated by checking the object passed to LLM
    //  - otherwise show the description as usual (black text, no buttons)

    // TODO: Add unique keys

    return (
        <>
            {
                summaryDescriptions.entities.length > 0 && <p>Entities and attributes:</p>
            }
            
            <ul>
            {
                summaryDescriptions.entities.map((entity) =>
                    <Typography component="span">
                        <li><strong>{capitalizeString(entity.entity)}</strong>: {entity.description}</li>
                        { entity.attributes.length > 0 && 
                            <ul>
                                <p></p>
                                <li><strong>Attributes</strong></li>
                                <ul>
                                    {entity.attributes.map((attribute : Attribute) =>
                                        <li><strong>{attribute.name}</strong>: {attribute.description}</li>
                                    )}
                                </ul>
                            </ul>
                        }
                        <p></p>
                    </Typography>
                )
            }

            </ul>

            {
                summaryDescriptions.relationships.length > 0 && <p>Relationships:</p>
            }

            <ul>
            {
                summaryDescriptions.relationships.map((relationship) =>
                    <Typography component="span">
                        <li>
                            <strong>{capitalizeString(relationship.sourceEntity)}</strong> {relationship.relationship} <strong>{capitalizeString(relationship.targetEntity)}</strong>: {relationship.description}
                        </li>
                    </Typography>
                )
            }
            </ul>

            { isLoadingSummaryDescriptions && <CircularProgress /> }
        </>
    )
}


export default SummaryDescriptionsTab