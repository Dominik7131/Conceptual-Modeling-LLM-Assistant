{
    "relationships": [
        {"entity": "vehicle", "expected_output": [{"name": "has a component", "inference": "structural component of a vehicle is a component of the vehicle", "source_entity": "Vehicle", "target_entity": "StructuralComponent", "cardinality": "1..1 --> 1..*"}, {"name": "manufactures vehicle", "inference": "manufacturer is a person who manufactures a vehicle", "source_entity": "Manufacturer", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}, {"name": "has a structural system", "inference": "Vehicle system means any structural system of a vehicle", "source_entity": "Vehicle", "target_entity": "VehicleSystem", "cardinality": "1..1 --> 1..*"}, {"name": "owns", "inference": "information on the owner of a road vehicle", "source_entity": "Owner", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}, {"name": "operates", "inference": "information on the operator of a road vehicle", "source_entity": "Operator", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}, {"name": "insured by", "inference": "vehicle has been covered by a third party insurance", "source_entity": "Vehicle", "target_entity": "ThirdPartyInsurance", "cardinality": "1..1 --> 1..1"}, {"name": "insures vehicle", "inference": "insurance contract shall always contain the particulars of the vehicle", "source_entity": "InsuranceContract", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}, {"name": "specifies", "inference": "Green Card means a certificate ... for the vehicle specified in the certificate", "source_entity": "GreenCard", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}, {"name": "has body work", "inference": "for a road vehicle it is stated: colour of bodywork", "source_entity": "RoadVehicle", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}]},
        {"entity": "road vehicle", "expected_output": [{"name": "has type", "inference": "type of road vehicle is defined as a set of road vehicles", "source_entity": "RoadVehicle", "target_entity": "VehicleType", "cardinality": "0..* --> 1..1"}, {"name": "registers", "inference": "registering a road vehicle in the register of road vehicles", "source_entity": "Registration", "target_entity": "RoadVehicle", "cardinality": "0..1 --> 1..1"}, {"name": "has body work", "inference": "for a road vehicle it is stated: colour of bodywork", "source_entity": "RoadVehicle", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}, {"name": "roadworthiness inspected by", "inference": "road vehicle technical inspection is an inspection of its roadworthiness", "source_entity": "RoadVehicle", "target_entity": "TechnicalInspection", "cardinality": "1..1 --> 0..*"}, {"name": "roadworthiness approved by", "inference": "road vehicle technical inspection is an inspection of its roadworthiness ... technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "RoadVehicle", "target_entity": "ReportOnRoadworthiness", "cardinality": "0..1 --> 0..*"}, {"name": "limited roadworthiness approved by", "inference": "road vehicle technical inspection is an inspection of its roadworthiness ... technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "RoadVehicle", "target_entity": "ReportOnLimitedRoadworthiness", "cardinality": "0..1 --> 0..*"}, {"name": "technical unfittness detected by", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "RoadVehicle", "target_entity": "ReportOnTechnicalUnfittness", "cardinality": "0..1 --> 0..*"}]},
        {"entity": "vehicle type", "expected_output": [{"name": "has type", "inference": "type of road vehicle is defined as a set of road vehicles", "source_entity": "RoadVehicle", "target_entity": "VehicleType", "cardinality": "0..* --> 1..1"}, {"name": "includes variant", "inference": "vehicle type may include versions", "source_entity": "VehicleType", "target_entity": "VehicleTypeVariant", "cardinality": "1..1 *- 0..*"}, {"name": "includes version", "inference": "vehicle type may include variants", "source_entity": "VehicleType", "target_entity": "VehicleTypeVersion", "cardinality": "1..1 *- 0..*"}]},
        {"entity": "motorised vehicle", "expected_output": [{"name": "powered by", "inference": "for a road vehicle it is stated: the engine power specified by the road vehicle", "source_entity": "MotorisedVehicle", "target_entity": "Engine", "cardinality": "1..1 --> 1..1"}]},
        {"entity": "manufacturer", "expected_output": [{"name": "manufactures component", "inference": "manufacturer is a person who manufactures component", "source_entity": "Manufacturer", "target_entity": "Component", "cardinality": "1..1 --> 0..*"}, {"name": "manufactures vehicle", "inference": "manufacturer is a person who manufactures a vehicle", "source_entity": "Manufacturer", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}, {"name": "manufactures system", "inference": "manufacturer is a person who manufactures a vehicle, its system", "source_entity": "Manufacturer", "target_entity": "VehicleSystem", "cardinality": "1..1 --> 0..*"}]},
        {"entity": "vehicle system", "expected_output": [{"name": "manufactures system", "inference": "manufacturer is a person who manufactures a vehicle, its system", "source_entity": "Manufacturer", "target_entity": "VehicleSystem", "cardinality": "1..1 --> 0..*"}, {"name": "has a structural system", "inference": "Vehicle system means any structural system of a vehicle", "source_entity": "Vehicle", "target_entity": "VehicleSystem", "cardinality": "1..1 --> 1..*"}]},
        {"entity": "owner", "expected_output": [{"name": "owns", "inference": "information on the owner of a road vehicle", "source_entity": "Owner", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}, {"name": "results into", "inference": "in the register of road vehicles on the basis of a written application by the owner of the road vehicle", "source_entity": "Owner", "target_entity": "RegistrationApplication", "cardinality": "1..1 --> 0..*"}]},
        {"entity": "operator", "expected_output": [{"name": "operates", "inference": "information on the operator of a road vehicle", "source_entity": "Operator", "target_entity": "Vehicle", "cardinality": "1..1 --> 0..*"}]},
        {"entity": "natural person", "expected_output": [{"name": "has permanent residence", "inference": "If the person is a natural person, the address of his permanent residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has long-term residence", "inference": "If the person is a natural person, the address of his long-term residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has temporary residence", "inference": "If the person is a natural person, the address of his temporary residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has other authorised residence", "inference": "If the person is a natural person, the address of his other authorised residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}]},
        {"entity": "business natural person", "expected_output": [{"name": "has permanent residence", "inference": "If the person is a natural person, the address of permanent residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has long-term residence", "inference": "If the person is a natural person, the address of long-term residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has temporary residence", "inference": "If the person is a natural person, the address of temporary residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "other authorised residence", "inference": "If the person is a natural person, the address of other authorised residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has registered office", "inference": "If the person is a natural person, the address of the registered office", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}]},
        {"entity": "address", "expected_output": [{"name": "has permanent residence", "inference": "If the person is a natural person, the address of his permanent residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has long-term residence", "inference": "If the person is a natural person, the address of his long-term residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has temporary residence", "inference": "If the person is a natural person, the address of his temporary residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has other authorised residence", "inference": "If the person is a natural person, the address of his other authorised residence", "source_entity": "NaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has permanent residence", "inference": "If the person is a natural person, the address of permanent residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has long-term residence", "inference": "If the person is a natural person, the address of long-term residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has temporary residence", "inference": "If the person is a natural person, the address of temporary residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "other authorised residence", "inference": "If the person is a natural person, the address of other authorised residence", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has registered office", "inference": "If the person is a natural person, the address of the registered office", "source_entity": "BusinessNaturalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has registered office", "inference": "If it is a legal person, the address of the registered office", "source_entity": "LegalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has location", "inference": "If it is a legal person, the location", "source_entity": "LegalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}]},
        {"entity": "legal person", "expected_output": [{"name": "has registered office", "inference": "If it is a legal person, the address of the registered office", "source_entity": "LegalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has location", "inference": "If it is a legal person, the location", "source_entity": "LegalPerson", "target_entity": "Address", "cardinality": "0..* --> 0..1"}, {"name": "has branch", "inference": "If it is a legal person, the location of the branch", "source_entity": "LegalPerson", "target_entity": "LegalPersonBranch", "cardinality": "0..* --> 0..1"}]},
        {"entity": "registration", "expected_output": [{"name": "certifies", "inference": "registration certificate of the road vehicle issued in the State of last registration", "source_entity": "RegistrationCertificate", "target_entity": "Registration", "cardinality": "1..1 --> 1..1"}, {"name": "registers", "inference": "registering a road vehicle in the register of road vehicles", "source_entity": "Registration", "target_entity": "RoadVehicle", "cardinality": "0..1 --> 1..1"}]},
        {"entity": "registration application", "expected_output": [{"name": "contains", "inference": "application for registration of a road vehicle shall include a green card", "source_entity": "RegistrationApplication", "target_entity": "GreenCard", "cardinality": "0..1 o-> 1..1"}, {"name": "results into", "inference": "application for registration of a road vehicle in the register of road vehicles", "source_entity": "RegistrationApplication", "target_entity": "VehicleRegistration", "cardinality": "1..1 --> 0..1"}, {"name": "results into", "inference": "in the register of road vehicles on the basis of a written application by the owner of the road vehicle", "source_entity": "Owner", "target_entity": "RegistrationApplication", "cardinality": "1..1 --> 0..*"}, {"name": "has attached certification of payment of value added tax", "inference": "application for registration of a road vehicle in the register of road vehicles shall include a certificate of payment of value added tax", "source_entity": "RegistrationApplication", "target_entity": "CertificateOfPayment", "cardinality": "0..* --> 0..1"}]},
        {"entity": "third party insurance", "expected_output": [{"name": "insured by", "inference": "vehicle has been covered by a third party insurance", "source_entity": "Vehicle", "target_entity": "ThirdPartyInsurance", "cardinality": "1..1 --> 1..1"}, {"name": "is based on", "inference": "vehicle has been covered by a third party insurance ... insurance is based on an insurance contract", "source_entity": "ThirdPartyInsurance", "target_entity": "InsuranceContract", "cardinality": "1..1 --> 1..1"}, {"name": "proves insurance", "inference": "Green Card means a certificate proving that the vehicle has been covered by a third party insurance contract", "source_entity": "GreenCard", "target_entity": "ThirdPartyInsurance", "cardinality": "1..* --> 1..1"}]},
        {"entity": "insurance contract", "expected_output": [{"name": "is based on", "inference": "vehicle has been covered by a third party insurance ... insurance is based on an insurance contract", "source_entity": "ThirdPartyInsurance", "target_entity": "InsuranceContract", "cardinality": "1..1 --> 1..1"}, {"name": "has policyholder", "inference": "insurance contract shall always contain the designation of the policyholder", "source_entity": "InsuranceContract", "target_entity": "PolicyHolder", "cardinality": "0..* --> 1..1"}, {"name": "has insurer", "inference": "insurance contract shall always contain the designation of the insurer", "source_entity": "InsuranceContract", "target_entity": "Insurer", "cardinality": "0..* --> 1..1"}, {"name": "insures vehicle", "inference": "insurance contract shall always contain the particulars of the vehicle", "source_entity": "InsuranceContract", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}]},
        {"entity": "policyholder", "expected_output": [{"name": "has policyholder", "inference": "insurance contract shall always contain the designation of the policyholder", "source_entity": "InsuranceContract", "target_entity": "PolicyHolder", "cardinality": "0..* --> 1..1"}]},
        {"entity": "insurer", "expected_output": [{"name": "has insurer", "inference": "insurance contract shall always contain the designation of the insurer", "source_entity": "InsuranceContract", "target_entity": "Insurer", "cardinality": "0..* --> 1..1"}]},
        {"entity": "green card", "expected_output": [{"name": "contains", "inference": "application for registration of a road vehicle shall include a green card", "source_entity": "RegistrationApplication", "target_entity": "GreenCard", "cardinality": "0..1 o-> 1..1"}, {"name": "proves insurance", "inference": "Green Card means a certificate proving that the vehicle has been covered by a third party insurance contract", "source_entity": "GreenCard", "target_entity": "ThirdPartyInsurance", "cardinality": "1..* --> 1..1"}, {"name": "specifies", "inference": "Green Card means a certificate ... for the vehicle specified in the certificate", "source_entity": "GreenCard", "target_entity": "Vehicle", "cardinality": "1..1 --> 1..1"}]},
        {"entity": "technical inspection", "expected_output": [{"name": "carried out by", "inference": "technical inspection station is a workplace specialised in carrying out technical inspections", "source_entity": "TechnicalInspection", "target_entity": "TechnicalInspectionStation", "cardinality": "1..* --> 1..1"}, {"name": "roadworthiness inspected by", "inference": "road vehicle technical inspection is an inspection of its roadworthiness", "source_entity": "RoadVehicle", "target_entity": "TechnicalInspection", "cardinality": "1..1 --> 0..*"}, {"name": "reported in", "inference": "technical inspection station shall draw up a technical inspection report on the technical inspection", "source_entity": "TechnicalInspection", "target_entity": "TechnicalInspectionReport", "cardinality": "1..1 --> 1..1"}]},
        {"entity": "technical inspection report", "expected_output": [{"name": "reported in", "inference": "technical inspection station shall draw up a technical inspection report on the technical inspection", "source_entity": "TechnicalInspection", "target_entity": "TechnicalInspectionReport", "cardinality": "1..1 --> 1..1"}, {"name": "reports on", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "TechnicalInspectionReport", "target_entity": "Defect", "cardinality": "0..* --> 0..*"}, {"name": "detects", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "TechnicalInspectionReport", "target_entity": "Defect", "cardinality": "0..* --> 0..*"}, {"name": "reports on", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle ... If a technical inspection reveals a serious defect", "source_entity": "TechnicalInspectionReport", "target_entity": "SeriousDefect", "cardinality": "0..* --> 1..*"}, {"name": "reports on", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle ... If the technical inspection of a road vehicle reveals a dangerous defect", "source_entity": "TechnicalInspectionReport", "target_entity": "DangerousDefect", "cardinality": "0..* --> 1..*"}]},
        {"entity": "defect", "expected_output": [{"name": "reports on", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "TechnicalInspectionReport", "target_entity": "Defect", "cardinality": "0..* --> 0..*"}, {"name": "detects", "inference": "On the basis of the defect record, the technical inspection station shall draw up a technical inspection report on the technical inspection of the road vehicle", "source_entity": "TechnicalInspectionReport", "target_entity": "Defect", "cardinality": "0..* --> 0..*"}]}
    ]
}