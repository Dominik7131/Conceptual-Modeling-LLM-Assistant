// Decision: separate top level class
class SHAS {
	1 <@>- 0..* SmartHome smartHome;
    1 <@>- * User users;	
}

// Decision: placement of Activity Log
class SmartHome {
	1 <@>- 0..1 Address address;
	1 <@>- 0..* Room rooms;		
	1 <@>- 0..1 ActivityLog log;
	* -- * User owners;
}

// Decision: modeling of Address 
class Address {
	String city;
	String postalCode;
	String street;
	String aptNumber;
}

class User {
	String name;
}

class Room {
	1 <@>- * SensorDevice sensors;
	1 <@>- * ActuatorDevice actuators;
}

// Decision: Abstract device introduced  
class Device {
	abstract;
	enum DeviceStatus { Activated, Deactivated };
	DeviceStatus deviceStatus;
	Integer deviceID;
}

// Decision: These Sensors and Actuators need to be kept as classes (not enums)
class SensorDevice {
	isA Device;
}

class ActuatorDevice {
	isA Device;
}

// Decision: sensor readings and control commands are required to be recorded separately
class ActivityLog {
	1 <@>- * SensorReading recordedReadings;
	1 <@>- * ControlCommand recordedCommands;
}

// Decision: Abstract runtime element to record time
class RuntimeElement {
	abstract;
	Time timestamp;
}

// Decision: Sensor device linked   
class SensorReading {
	isA RuntimeElement;
	Double value;
	* -- 1 SensorDevice sensor;
}

// Decision: CommandType and Command Status   
// Decision: Actuator device linked   
class ControlCommand {
	isA RuntimeElement;
	enum CommandType {lockDoor, turnOnHeating};
	CommandType commandType;
	enum CommandStatus {Requested, Completed, Failed};
	CommandStatus commandStatus;
	* -- 1 ActuatorDevice actuator;
}

class AlertRule {
	enum RuleStatus {created, edited, activated, deactivated };
	RuleStatus ruleStatus;
	1 <@>- 0..1 BooleanExpression precondition;
	1 <@>- * CommandSequence actions;
}

// Decision: the BooleanExpression needs to be modeled as a tree
class BooleanExpression {
	abstract;
}

class RelationalTerm {
	isA BooleanExpression;
	* -> 0..1 Room room;
	* -> 0..1 SensorDevice sensor;
	* -> 0..1 ActuatorDevice actuator;
	* -> 0..1 SensorReading sensorReading;
	* -> 0..1 ControlCommand controlCommand;
}


// Comment: Containment hierarchy can be neglected here   
class NotExpression {
	isA BooleanExpression;
	0..1 -> 1 BooleanExpression expression;	
}

// Comment: Containment hierarchy can be neglected here for left and right expressions 
// Decision: left and right expressions to represent the expression tree
// Comment: Separate classes for AndExpression, OrExpression is acceptable  
class BinaryExpression {
	isA BooleanExpression;
	enum BinaryOp {AND, OR };
	0..1 -> 1 BooleanExpression leftExpr;
	0..1 -> 1 BooleanExpression rightExpr;
}

// Decision: How to represent the sequence of commands
class CommandSequence {
	* -> 0..1 CommandSequence nextCommand;
	1 <@>- 0..1 ControlCommand command;
}